{
	"info": {
		"_postman_id": "3373d31f-2151-4870-9ccd-45beef262005",
		"name": "Transbank Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "http://localhost:5000/people/",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c2b8cdf3-b1fb-4be9-940f-196d4a445249",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"tests[\"Estado 200\"] = responseCode.code === 200;\r",
							"console.log(responseCode);\r",
							"\r",
							"pm.test(\"Status OK\", function() {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"El tiempo de Response es menor de 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test('Existe propiedad lastName', function() {\r",
							"    var Ajv = require('ajv');\r",
							"    ajv = new Ajv(),\r",
							"    schema = { //Esquema contiene un arreglo\r",
							"        \"type\": \"array\",\r",
							"        \"items\": {//En este array debe haber un \"Properties Object\"\r",
							"                    \"type\": \"object\", //Estas son las propiedades dentro de este objeto. Esto probará el TIPO de propiedad.\r",
							"                    \"properties\": {\r",
							"                        \"lastName\": { \"type\": \"string\" },\r",
							"                        \r",
							"            },\"required\" : [\"lastName\"]//Propiedades enumeradas estén presentes\r",
							"        }\r",
							"    };\r",
							"    \r",
							"    var validate = ajv.compile(schema);\r",
							"    \r",
							"    var valid = validate(jsonData)\r",
							"    if(valid === false){\r",
							"        console.log('Invalid: ' + ajv.errorsText(validate.errors));\r",
							"    }\r",
							"    \r",
							"    pm.expect(valid).to.be.true;\r",
							"  \r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.test('Existe propiedad firstMame', function() {\r",
							"    var Ajv = require('ajv');\r",
							"    ajv = new Ajv(),\r",
							"    schema = { //Esquema contiene un arreglo\r",
							"        \"type\": \"array\",\r",
							"        \"items\": {//En este array debe haber un \"Properties Object\"\r",
							"                    \"type\": \"object\", //Estas son las propiedades dentro de este objeto. Esto probará el TIPO de propiedad.\r",
							"                    \"properties\": {\r",
							"                        \"firstMame\": { \"type\": \"string\" },\r",
							"                        \r",
							"            },\"required\" : [\"firstMame\"]//Propiedades enumeradas estén presentes\r",
							"        }\r",
							"    };\r",
							"    \r",
							"    var validate = ajv.compile(schema);\r",
							"    \r",
							"    var valid = validate(jsonData)\r",
							"    if(valid === false){\r",
							"        console.log('Invalid: ' + ajv.errorsText(validate.errors));\r",
							"    }\r",
							"    \r",
							"    pm.expect(valid).to.be.true;\r",
							"  \r",
							"});\r",
							"\r",
							"pm.test('Existe propiedad age', function() {\r",
							"    var Ajv = require('ajv');\r",
							"    ajv = new Ajv(),\r",
							"    schema = { //Esquema contiene un arreglo\r",
							"        \"type\": \"array\",\r",
							"        \"items\": {//En este array debe haber un \"Properties Object\"\r",
							"                    \"type\": \"object\", //Estas son las propiedades dentro de este objeto. Esto probará el TIPO de propiedad.\r",
							"                    \"properties\": {\r",
							"                        \"age\": { \"type\": \"number\" },\r",
							"                        \r",
							"            },\"required\" : [\"age\"]//Propiedades enumeradas estén presentes\r",
							"        }\r",
							"    };\r",
							"    \r",
							"    var validate = ajv.compile(schema);\r",
							"    \r",
							"    var valid = validate(jsonData)\r",
							"    if(valid === false){\r",
							"        console.log('Invalid: ' + ajv.errorsText(validate.errors));\r",
							"    }\r",
							"    \r",
							"    pm.expect(valid).to.be.true;\r",
							"  \r",
							"});\r",
							"\r",
							"pm.test('Existe propiedad id', function() {\r",
							"    var Ajv = require('ajv');\r",
							"    ajv = new Ajv(),\r",
							"    schema = { //Esquema contiene un arreglo\r",
							"        \"type\": \"array\",\r",
							"        \"items\": {//En este array debe haber un \"Properties Object\"\r",
							"                    \"type\": \"object\", //Estas son las propiedades dentro de este objeto. Esto probará el TIPO de propiedad.\r",
							"                    \"properties\": {\r",
							"                        \"id\": { \"type\": \"string\" },\r",
							"                        \r",
							"            },\"required\" : [\"id\"]//Propiedades enumeradas estén presentes\r",
							"        }\r",
							"    };\r",
							"    \r",
							"    var validate = ajv.compile(schema);\r",
							"    \r",
							"    var valid = validate(jsonData)\r",
							"    if(valid === false){\r",
							"        console.log('Invalid: ' + ajv.errorsText(validate.errors));\r",
							"    }\r",
							"    \r",
							"    pm.expect(valid).to.be.true;\r",
							"  \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n        \"firstMame\": \"Gabriel\",\n        \"lastName\": \"Fuentes\",\n        \"age\": 11\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/people/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"people",
						""
					]
				}
			},
			"response": []
		},
		{
			"name": "http://localhost:5000/people/",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "dab85f24-be2e-41b8-bfbd-56327e3d0853",
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"tests[\"Estado 200\"] = responseCode.code === 200;\r",
							"console.log(responseCode);\r",
							"\r",
							"pm.test(\"Status OK\", function() {\r",
							"    pm.response.to.be.ok;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"El tiempo de Response es menor de 1000ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test('Schema is valfirstMame', function() {\r",
							"    var Ajv = require('ajv');\r",
							"    ajv = new Ajv(),\r",
							"    schema = { //Validacion contiene array\r",
							"        \"type\": \"array\",\r",
							"        \"items\": {//Este array contiene objeto object\r",
							"                    \"type\": \"object\", //Propiedades que debe contener el objeto\r",
							"                    \"properties\": {\r",
							"                        \"firstMame\": { \"type\": \"string\" },\r",
							"                        \"lastName\": { \"type\": \"string\" },\r",
							"                        \"age\": { \"type\": \"number\" },\r",
							"                        \"id\": {\"type\": \"string\" }\r",
							"                        \r",
							"            },\"required\" : [\"firstMame\", \"lastName\", \"age\", \"id\"]//Estas propiedades deben estar presentes\r",
							"        }\r",
							"    };\r",
							"    \r",
							"    var valfirstMameate = ajv.compile(schema);\r",
							"    \r",
							"    var valfirstMame = valfirstMameate(jsonData)\r",
							"    if(valfirstMame === false){\r",
							"        console.log('InvalfirstMame: ' + ajv.errorsText(valfirstMameate.errors));\r",
							"    }\r",
							"    \r",
							"    pm.expect(valfirstMame).to.be.true;\r",
							"  \r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n        \"firstMame\": \"Pedro\",\n        \"lastName\": \"Perez\",\n        \"age\": 60\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/people/",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"people",
						""
					]
				}
			},
			"response": []
		}
	],
	"protocolProfileBehavior": {}
}